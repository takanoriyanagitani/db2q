syntax = "proto3";

package db2q.proto.queue.v1;

import "google/protobuf/timestamp.proto";

message Uuid {
  fixed64 hi = 1;
  fixed64 lo = 2;
}

message QSvc {
  message PushBackRequest {
    Uuid request_id = 1;
    Uuid topic_id = 2;
    bytes value = 3;
  }
  message PushBackResponse {
    google.protobuf.Timestamp pushed = 1;
  }

  message PopFrontRequest {
    Uuid request_id = 1;
    Uuid topic_id = 2;
  }
  message PopFrontResponse {
    google.protobuf.Timestamp popped = 1;
    bytes value = 2;
  }

  message CountRequest {
    Uuid request_id = 1;
    Uuid topic_id = 2;
  }
  message CountResponse {
    fixed64 count = 1;
  }

  message NextRequest {
    Uuid request_id = 1;
    Uuid topic_id = 2;
    sfixed64 previous = 3; // use negative integer to get the first item
  }
  message NextResponse {
    sfixed64 next = 1;
    bytes value = 2;
  }

  message KeysRequest {
    Uuid request_id = 1;
    Uuid topic_id = 2;
    fixed64 max_keys = 3;
  }
  message KeysResponse {
    fixed64 key = 1;
  }
}

message TopicSvc {
  message CreateRequest {
    Uuid request_id = 1;
    Uuid topic_id = 2;
  }
  message CreateResponse {
    google.protobuf.Timestamp created = 1;
  }

  message DropRequest {
    Uuid request_id = 1;
    Uuid topic_id = 2;
  }
  message DropResponse {
    google.protobuf.Timestamp dropped = 1;
  }

  message ListRequest {
    Uuid request_id = 1;
  }
  message ListResponse {
    repeated Uuid topics = 1;
  }
}

service TopicService {
  rpc Create(TopicSvc.CreateRequest) returns (TopicSvc.CreateResponse);
  rpc Drop(TopicSvc.DropRequest) returns (TopicSvc.DropResponse);

  rpc List(TopicSvc.ListRequest) returns (TopicSvc.ListResponse);
}

service QueueService {
  rpc PushBack(QSvc.PushBackRequest) returns (QSvc.PushBackResponse);
  rpc PopFront(QSvc.PopFrontRequest) returns (QSvc.PopFrontResponse);

  rpc Count(QSvc.CountRequest) returns (QSvc.CountResponse);
  rpc Next(QSvc.NextRequest) returns (QSvc.NextResponse);
  rpc Keys(QSvc.KeysRequest) returns (stream QSvc.KeysResponse);
}

message CntSvc {
  message ExactRequest {
    Uuid request_id = 1;
    Uuid topic_id = 2;
  }
  message ExactResponse {
    fixed64 count = 1;
  }

  message FastRequest {
    Uuid request_id = 1;
    Uuid topic_id = 2;
  }
  message FastResponse {
    fixed64 count_estimate = 1;
  }
}

service CountService {
  rpc Exact(CntSvc.ExactRequest) returns (CntSvc.ExactResponse);
  rpc Fast(CntSvc.FastRequest) returns (CntSvc.FastResponse);
}
